(defun myel-copy-to-next()
  "copy line to killring,newline and yank"
  (interactive)
  (let (bounds pos1 pos2 line1)
    (setq bounds (bounds-of-thing-at-point 'line))
    (setq pos1 (car bounds))
    ;;结尾有个\n
    (setq pos2 (- (cdr bounds) 1))
    (setq line1 (buffer-substring-no-properties pos1 pos2))
    ;;(copy-region-as-kill begin end)
    ;;(yank)
    (end-of-line)
    (newline)
    (insert line1)))
(defun myel-exchange-next-line()
  "有待完善"
  (interactive)
  (let (line1 line2)
    (setq line1 (buffer-substring-no-properties (line-beginning-position) (line-end-position) ))
    (next-line)
    (setq line2 (buffer-substring-no-properties (line-beginning-position) (line-end-position) ))
    (previous-line)
    (kill-whole-line)
    (kill-whole-line)
    (insert line2)
    (newline)
    (insert line1)
    (newline)
    (previous-line)))


(defun myel-kill-backward-word()
  "kill-backward-word"
  (interactive)
  (push-mark)
  (backward-word)
  (kill-region (point) (mark)))
(defun c-transpose-lines-down ()
  (interactive)
  (unless (minibufferp)
    (delete-trailing-whitespace)
    (end-of-line)
    (unless (eobp)
      (forward-line)
      (unless (eobp)
	(transpose-lines 1)
	(forward-line -1)
	(end-of-line)))))

(defun c-transpose-lines-up ()
  (interactive)
  (unless (minibufferp)
    (delete-trailing-whitespace)
    (beginning-of-line)
    (unless (or (bobp) (eobp))
      (forward-line)
      (transpose-lines -1)
      (beginning-of-line -1))))

(defun c-transpose-paragraphs-down ()
  (interactive)
  (unless (minibufferp)
    (let ((p nil))
      (delete-trailing-whitespace)
      (backward-paragraph)
      (when (bobp) (setq p t) (newline))
      (forward-paragraph)
      (unless (eobp) (transpose-paragraphs 1))
      (when p (save-excursion (goto-char (point-min)) (kill-line))))))

(defun c-transpose-paragraphs-up ()
  (interactive)
  (unless (or (minibufferp) (save-excursion (backward-paragraph) (bobp)))
    (let ((p nil))
      (delete-trailing-whitespace)
      (backward-paragraph 2)
      (when (bobp) (setq p t) (newline))
      (forward-paragraph 2)
      (transpose-paragraphs -1)
      (backward-paragraph)
            (when p (save-excursion (goto-char (point-min)) (kill-line))))))


(provide 'myel)
